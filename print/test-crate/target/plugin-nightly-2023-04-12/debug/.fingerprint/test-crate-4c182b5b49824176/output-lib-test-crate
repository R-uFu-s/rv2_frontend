fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/lib.rs:1:11: 1:11
    scope 1 {
    }

    bb0: {
        _0 = const ();                   // scope 1 at src/lib.rs:1:11: 2:2
        return;                          // scope 0 at src/lib.rs:2:2: 2:2
    }
}
fn returnone() -> usize {
    let mut _0: usize;                   // return place in scope 0 at src/lib.rs:3:17: 3:22
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = const 1_usize;              // scope 2 at src/lib.rs:4:3: 4:4
        return;                          // scope 0 at src/lib.rs:5:2: 5:2
    }
}
fn returnonetup() -> (usize, usize) {
    let mut _0: (usize, usize);          // return place in scope 0 at src/lib.rs:6:20: 6:33
    scope 1 {
        scope 2 {
            scope 3 {
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _0 = (const 1_usize, const 1_usize); // scope 2 at src/lib.rs:7:3: 7:8
        return;                          // scope 0 at src/lib.rs:8:2: 8:2
    }
}
fn takestring_returnone(_1: std::string::String, _2: &'_#4r std::string::String, _3: &'_#5r mut std::string::String) -> usize {
    debug s0 => _1;                      // in scope 0 at src/lib.rs:9:25: 9:31
    debug s1 => _2;                      // in scope 0 at src/lib.rs:9:39: 9:41
    debug s3 => _3;                      // in scope 0 at src/lib.rs:9:50: 9:52
    let mut _0: usize;                   // return place in scope 0 at src/lib.rs:9:67: 9:72
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
        scope 5 {
        }
    }

    bb0: {
        _0 = const 1_usize;              // scope 5 at src/lib.rs:10:3: 10:4
        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at src/lib.rs:11:1: 11:2
    }

    bb1: {
        return;                          // scope 0 at src/lib.rs:11:2: 11:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at src/lib.rs:9:1: 11:2
    }
}
fn returnstring() -> std::string::String {
    let mut _0: std::string::String;     // return place in scope 0 at src/lib.rs:12:20: 12:26
    scope 1 {
        scope 2 {
            debug s => _1;               // in scope 2 at src/lib.rs:13:7: 13:8
            scope 7 {
            }
        }
        scope 3 {
            let _1: std::string::String; // in scope 3 at src/lib.rs:13:7: 13:8
            scope 4 {
                scope 5 {
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 3 at src/lib.rs:13:7: 13:8
        _1 = <std::string::String as std::convert::From<&'_#2r str>>::from(const "hello") -> [return: bb1, unwind: bb3]; // scope 4 at src/lib.rs:13:9: 13:30
                                         // mir::Constant
                                         // + span: src/lib.rs:13:9: 13:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&'_#2r str) -> std::string::String {<std::string::String as std::convert::From<&'_#2r str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: src/lib.rs:13:22: 13:29
                                         // + literal: Const { ty: &'_#3r str, val: Value(Slice(..)) }
    }

    bb1: {
        FakeRead(ForLet(None), _1);      // scope 3 at src/lib.rs:13:7: 13:8
        _0 = move _1;                    // scope 7 at src/lib.rs:14:3: 14:4
        drop(_1) -> [return: bb2, unwind: bb3]; // scope 1 at src/lib.rs:15:1: 15:2
    }

    bb2: {
        StorageDead(_1);                 // scope 1 at src/lib.rs:15:1: 15:2
        return;                          // scope 0 at src/lib.rs:15:2: 15:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at src/lib.rs:12:1: 15:2
    }
}
fn returnstringtup() -> (std::string::String, std::string::String) {
    let mut _0: (std::string::String, std::string::String); // return place in scope 0 at src/lib.rs:16:23: 16:38
    let mut _3: std::string::String;     // in scope 0 at src/lib.rs:19:4: 19:6
    let mut _4: std::string::String;     // in scope 0 at src/lib.rs:19:7: 19:9
    scope 1 {
        scope 2 {
            debug s1 => _1;              // in scope 2 at src/lib.rs:17:7: 17:9
            scope 7 {
                debug s2 => _2;          // in scope 7 at src/lib.rs:18:7: 18:9
                scope 12 {
                    scope 13 {
                    }
                    scope 14 {
                    }
                }
            }
            scope 8 {
                let _2: std::string::String; // in scope 8 at src/lib.rs:18:7: 18:9
                scope 9 {
                    scope 10 {
                    }
                    scope 11 {
                    }
                }
            }
        }
        scope 3 {
            let _1: std::string::String; // in scope 3 at src/lib.rs:17:7: 17:9
            scope 4 {
                scope 5 {
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 3 at src/lib.rs:17:7: 17:9
        _1 = <std::string::String as std::convert::From<&'_#2r str>>::from(const "hello") -> [return: bb1, unwind: bb10]; // scope 4 at src/lib.rs:17:10: 17:31
                                         // mir::Constant
                                         // + span: src/lib.rs:17:10: 17:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&'_#2r str) -> std::string::String {<std::string::String as std::convert::From<&'_#2r str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: src/lib.rs:17:23: 17:30
                                         // + literal: Const { ty: &'_#3r str, val: Value(Slice(..)) }
    }

    bb1: {
        FakeRead(ForLet(None), _1);      // scope 3 at src/lib.rs:17:7: 17:9
        StorageLive(_2);                 // scope 8 at src/lib.rs:18:7: 18:9
        _2 = <std::string::String as std::convert::From<&'_#4r str>>::from(const "hello") -> [return: bb2, unwind: bb9]; // scope 9 at src/lib.rs:18:10: 18:31
                                         // mir::Constant
                                         // + span: src/lib.rs:18:10: 18:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&'_#4r str) -> std::string::String {<std::string::String as std::convert::From<&'_#4r str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: src/lib.rs:18:23: 18:30
                                         // + literal: Const { ty: &'_#5r str, val: Value(Slice(..)) }
    }

    bb2: {
        FakeRead(ForLet(None), _2);      // scope 8 at src/lib.rs:18:7: 18:9
        StorageLive(_3);                 // scope 13 at src/lib.rs:19:4: 19:6
        _3 = move _1;                    // scope 13 at src/lib.rs:19:4: 19:6
        StorageLive(_4);                 // scope 14 at src/lib.rs:19:7: 19:9
        _4 = move _2;                    // scope 14 at src/lib.rs:19:7: 19:9
        _0 = (move _3, move _4);         // scope 12 at src/lib.rs:19:3: 19:10
        drop(_4) -> [return: bb3, unwind: bb7]; // scope 12 at src/lib.rs:19:9: 19:10
    }

    bb3: {
        StorageDead(_4);                 // scope 12 at src/lib.rs:19:9: 19:10
        drop(_3) -> [return: bb4, unwind: bb8]; // scope 12 at src/lib.rs:19:9: 19:10
    }

    bb4: {
        StorageDead(_3);                 // scope 12 at src/lib.rs:19:9: 19:10
        drop(_2) -> [return: bb5, unwind: bb9]; // scope 2 at src/lib.rs:20:1: 20:2
    }

    bb5: {
        StorageDead(_2);                 // scope 2 at src/lib.rs:20:1: 20:2
        drop(_1) -> [return: bb6, unwind: bb10]; // scope 1 at src/lib.rs:20:1: 20:2
    }

    bb6: {
        StorageDead(_1);                 // scope 1 at src/lib.rs:20:1: 20:2
        return;                          // scope 0 at src/lib.rs:20:2: 20:2
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate]; // scope 12 at src/lib.rs:19:9: 19:10
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate]; // scope 2 at src/lib.rs:20:1: 20:2
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate]; // scope 1 at src/lib.rs:20:1: 20:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at src/lib.rs:16:1: 20:2
    }
}
fn foo(_1: &'_#5r std::string::String, _2: std::string::String) -> (&'_#4r std::string::String, std::string::String) {
    debug s1 => _1;                      // in scope 0 at src/lib.rs:21:8: 21:10
    debug s2 => _2;                      // in scope 0 at src/lib.rs:21:19: 21:21
    let mut _0: (&'_#4r std::string::String, std::string::String); // return place in scope 0 at src/lib.rs:21:31: 21:47
    let mut _3: &'_#6r std::string::String; // in scope 0 at src/lib.rs:22:4: 22:6
    let mut _4: std::string::String;     // in scope 0 at src/lib.rs:22:7: 22:9
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
        scope 4 {
            scope 5 {
            }
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);                 // scope 5 at src/lib.rs:22:4: 22:6
        _3 = _1;                         // scope 5 at src/lib.rs:22:4: 22:6
        StorageLive(_4);                 // scope 6 at src/lib.rs:22:7: 22:9
        _4 = move _2;                    // scope 6 at src/lib.rs:22:7: 22:9
        _0 = (move _3, move _4);         // scope 4 at src/lib.rs:22:3: 22:10
        drop(_4) -> [return: bb1, unwind: bb3]; // scope 4 at src/lib.rs:22:9: 22:10
    }

    bb1: {
        StorageDead(_4);                 // scope 4 at src/lib.rs:22:9: 22:10
        StorageDead(_3);                 // scope 4 at src/lib.rs:22:9: 22:10
        drop(_2) -> [return: bb2, unwind: bb4]; // scope 0 at src/lib.rs:23:1: 23:2
    }

    bb2: {
        return;                          // scope 0 at src/lib.rs:23:2: 23:2
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate]; // scope 0 at src/lib.rs:23:1: 23:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at src/lib.rs:21:1: 23:2
    }
}
